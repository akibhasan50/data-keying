[{"D:\\data keying\\src\\index.js":"1","D:\\data keying\\src\\App.js":"2","D:\\data keying\\src\\reportWebVitals.js":"3","D:\\data keying\\src\\Redux\\store.js":"4","D:\\data keying\\src\\components\\Form\\AddRecord.js":"5","D:\\data keying\\src\\components\\Dashboard\\Dashboard.js":"6","D:\\data keying\\src\\components\\ImageTagging\\Tagging.js":"7","D:\\data keying\\src\\components\\Table\\SimpleTable.js":"8","D:\\data keying\\src\\components\\Navbar\\Navbar.js":"9","D:\\data keying\\src\\components\\Table\\DataTable.js":"10","D:\\data keying\\src\\components\\BaseLayout\\index.js":"11","D:\\data keying\\src\\Redux\\Reducers\\index.js":"12","D:\\data keying\\src\\components\\Header\\Header.js":"13","D:\\data keying\\src\\components\\Footer\\Footer.js":"14","D:\\data keying\\src\\components\\Menu\\Menu.js":"15","D:\\data keying\\src\\hooks\\useCanvas.js":"16","D:\\data keying\\src\\components\\Signup\\SignUp.js":"17","D:\\data keying\\src\\components\\Signin\\SignIn.js":"18","D:\\data keying\\src\\components\\DataEntry\\DataEntry.js":"19","D:\\data keying\\src\\components\\ImageTagging\\Aitagging.js":"20","D:\\data keying\\src\\components\\DataEntry\\SearchBar.js":"21","D:\\data keying\\src\\components\\FullScreen\\FullScreen.js":"22","D:\\data keying\\src\\components\\AlertBox\\AlertBox.js":"23","D:\\data keying\\src\\pages\\SignUp\\SignUp.js":"24","D:\\data keying\\src\\pages\\SignIn\\SignIn.js":"25","D:\\data keying\\src\\Redux\\Actions\\authAction.js":"26","D:\\data keying\\src\\Redux\\Actions\\types.js":"27","D:\\data keying\\src\\Redux\\Services\\authService.js":"28","D:\\data keying\\src\\utilities\\http-common.js":"29","D:\\data keying\\src\\Redux\\Reducers\\countryReducer.js":"30","D:\\data keying\\src\\Redux\\Reducers\\authReducer.js":"31","D:\\data keying\\src\\Redux\\Reducers\\projectReducer.js":"32","D:\\data keying\\src\\Redux\\Reducers\\languageReducer.js":"33","D:\\data keying\\src\\Redux\\Actions\\languageAction.js":"34","D:\\data keying\\src\\Redux\\Actions\\projectAction.js":"35","D:\\data keying\\src\\Redux\\Actions\\countryAction.js":"36","D:\\data keying\\src\\Redux\\Services\\countryService.js":"37","D:\\data keying\\src\\Redux\\Services\\projectService.js":"38","D:\\data keying\\src\\Redux\\Services\\languageService.js":"39","D:\\data keying\\src\\components\\Sidebar\\Sidebar.js":"40","D:\\data keying\\src\\components\\Sidebar\\data.js":"41","D:\\data keying\\src\\components\\ImageSeries\\ImageSeries.js":"42"},{"size":371,"mtime":1633328966861,"results":"43","hashOfConfig":"44"},{"size":2303,"mtime":1646288976812,"results":"45","hashOfConfig":"44"},{"size":362,"mtime":1609212310000,"results":"46","hashOfConfig":"44"},{"size":403,"mtime":1632631646195,"results":"47","hashOfConfig":"44"},{"size":3899,"mtime":1632903398525,"results":"48","hashOfConfig":"44"},{"size":5425,"mtime":1642392726660,"results":"49","hashOfConfig":"44"},{"size":34087,"mtime":1647342173448,"results":"50","hashOfConfig":"44"},{"size":2713,"mtime":1632551929498,"results":"51","hashOfConfig":"44"},{"size":1554,"mtime":1632724386597,"results":"52","hashOfConfig":"44"},{"size":11911,"mtime":1632629948620,"results":"53","hashOfConfig":"44"},{"size":800,"mtime":1632545241987,"results":"54","hashOfConfig":"44"},{"size":345,"mtime":1634533805987,"results":"55","hashOfConfig":"44"},{"size":2552,"mtime":1646288922173,"results":"56","hashOfConfig":"44"},{"size":401,"mtime":1632389936355,"results":"57","hashOfConfig":"44"},{"size":6714,"mtime":1646294867826,"results":"58","hashOfConfig":"44"},{"size":1161,"mtime":1632982369744,"results":"59","hashOfConfig":"44"},{"size":4228,"mtime":1633839357733,"results":"60","hashOfConfig":"44"},{"size":3411,"mtime":1633839533670,"results":"61","hashOfConfig":"44"},{"size":30981,"mtime":1647407034673,"results":"62","hashOfConfig":"44"},{"size":21407,"mtime":1647343831536,"results":"63","hashOfConfig":"44"},{"size":1452,"mtime":1642395633212,"results":"64","hashOfConfig":"44"},{"size":816,"mtime":1647318811552,"results":"65","hashOfConfig":"44"},{"size":2807,"mtime":1646289231319,"results":"66","hashOfConfig":"44"},{"size":4362,"mtime":1633940246320,"results":"67","hashOfConfig":"44"},{"size":6081,"mtime":1641268308490,"results":"68","hashOfConfig":"44"},{"size":657,"mtime":1634545901787,"results":"69","hashOfConfig":"44"},{"size":1123,"mtime":1636018729963,"results":"70","hashOfConfig":"44"},{"size":926,"mtime":1641274436193,"results":"71","hashOfConfig":"44"},{"size":350,"mtime":1632632006421,"results":"72","hashOfConfig":"44"},{"size":1000,"mtime":1633510213374,"results":"73","hashOfConfig":"44"},{"size":1177,"mtime":1641451405902,"results":"74","hashOfConfig":"44"},{"size":1100,"mtime":1636438757526,"results":"75","hashOfConfig":"44"},{"size":1018,"mtime":1633323254294,"results":"76","hashOfConfig":"44"},{"size":1658,"mtime":1633322510367,"results":"77","hashOfConfig":"44"},{"size":2129,"mtime":1636278942293,"results":"78","hashOfConfig":"44"},{"size":1635,"mtime":1633507544443,"results":"79","hashOfConfig":"44"},{"size":596,"mtime":1634357615036,"results":"80","hashOfConfig":"44"},{"size":711,"mtime":1636278727254,"results":"81","hashOfConfig":"44"},{"size":596,"mtime":1633321159793,"results":"82","hashOfConfig":"44"},{"size":1926,"mtime":1646194496597,"results":"83","hashOfConfig":"44"},{"size":808,"mtime":1646712592997,"results":"84","hashOfConfig":"44"},{"size":6500,"mtime":1646548697005,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"1p0u9z0",{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"88"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"88"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"88"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"88"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"88"},"D:\\data keying\\src\\index.js",[],["186","187"],"D:\\data keying\\src\\App.js",["188"],"import \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport BaseLayout from \"./components/BaseLayout/\";\nimport Dashboard from \"./components/Dashboard/Dashboard\";\nimport Test from \"./components/Form/AddRecord\";\nimport DataTable from \"./components/Table/DataTable\";\nimport SimpleTable from \"./components/Table/SimpleTable\";\nimport Tagging from \"./components/ImageTagging/Tagging\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport SignUp from \"./pages/SignUp/SignUp\";\nimport login from \"./pages/SignIn/SignIn\";\nimport DataEntry from \"./components/DataEntry/DataEntry\";\nimport Aitagging from \"./components/ImageTagging/Aitagging\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport ImageSeries from \"./components/ImageSeries/ImageSeries\";\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n                <>\n                    <div className=\"wrapper\">\n                        <BaseLayout exact path=\"/\" component={Dashboard} />\n                        <BaseLayout exact path=\"/Add-record\" component={Test} />\n                        <BaseLayout\n                            exact\n                            path=\"/All-data\"\n                            component={DataTable}\n                        />\n                        <BaseLayout\n                            exact\n                            path=\"/Simple-table\"\n                            component={SimpleTable}\n                        />\n                        <BaseLayout\n                            exact\n                            path=\"/series\"\n                            component={ImageSeries}\n                        />\n                        <Route exact path=\"/sidebar\" component={Sidebar} />\n                        <Route exact path=\"/tag\" component={Tagging} />\n                        <Route exact path=\"/nav\" component={Navbar} />\n                        <Route exact path=\"/signup\" component={SignUp} />\n                        <Route exact path=\"/login\" component={login} />\n                        <Route exact path=\"/entry\" component={DataEntry} />\n                        <Route exact path=\"/ai\" component={Aitagging} />\n                    </div>\n                </>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","D:\\data keying\\src\\reportWebVitals.js",[],"D:\\data keying\\src\\Redux\\store.js",[],"D:\\data keying\\src\\components\\Form\\AddRecord.js",[],"D:\\data keying\\src\\components\\Dashboard\\Dashboard.js",[],"D:\\data keying\\src\\components\\ImageTagging\\Tagging.js",["189","190","191","192"],"import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport RotateLeftIcon from \"@mui/icons-material/RotateLeft\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport style from \"./Tagging.css\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemButton from \"@mui/material/ListItemButton\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport FullScreen from \"./../FullScreen/FullScreen\";\r\nimport Sidebar from \"./../Sidebar/Sidebar\";\r\n\r\nconst baptismField = [\r\n    \"Baptism Date\",\r\n    \"Name\",\r\n    \"Gender\",\r\n    \"Chi:Gender\",\r\n    \"Birth Date\",\r\n    \"Fathers_name\",\r\n    \"Mothers_name\",\r\n];\r\nconst burialField = [\r\n    \"Burial Date\",\r\n    \"Name\",\r\n    \"Age\",\r\n    \"Gender\",\r\n    \"Deathl_date\",\r\n    \"Fathers_name\",\r\n    \"Mothers_name\",\r\n    \"Spouse_name\",\r\n];\r\nconst marriageField = [\r\n    \"Event Date\",\r\n    \"Birth Date\",\r\n    \"father\",\r\n    \"mother\",\r\n    \"brother\",\r\n    \"sister\",\r\n];\r\nconst mixedField = [\r\n    \"Event Date\",\r\n    \"Birth Date\",\r\n    \"wife\",\r\n    \"children\",\r\n    \"L-Chi:F:Name\",\r\n    \"L-Chi:M:Name\",\r\n];\r\n\r\nexport default function Tagging() {\r\n    const imgRef = useRef(null);\r\n    const keyevent = useRef(null);\r\n    const canvRef = useRef(null);\r\n    const zoomRef = useRef(null);\r\n    const rightMenu = useRef(null);\r\n    const mainSectionRef = useRef(null);\r\n    const [disabled, setDisabled] = useState(false);\r\n    const [params, setParams] = useState({\r\n        type: \"Baptism\",\r\n        fields: baptismField,\r\n    });\r\n    const [bbdCheck, setBbdCheck] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [imgType, setImgType] = useState(\"\");\r\n    const baprismMenuState = [\r\n        {\r\n            id: 1,\r\n            name: \"First Name\",\r\n            disabled: null,\r\n            keyCode: 65,\r\n            keyName: \"A\",\r\n            taggedTime: \"\",\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Last Name\",\r\n            disabled: null,\r\n            keyCode: 83,\r\n            keyName: \"S\",\r\n            taggedTime: \"\",\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Fathers Name\",\r\n            disabled: null,\r\n            keyCode: 68,\r\n            keyName: \"D\",\r\n            taggedTime: \"\",\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Mothers Name\",\r\n            disabled: null,\r\n            keyCode: 70,\r\n            keyName: \"F\",\r\n            taggedTime: \"\",\r\n        },\r\n    ];\r\n    const burialMenuState = [\r\n        {\r\n            id: 1,\r\n            name: \"gender\",\r\n            disabled: null,\r\n            keyCode: 77,\r\n            keyName: \"M\",\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"husband Name\",\r\n            disabled: null,\r\n            keyCode: 76,\r\n            keyName: \"L\",\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"children Name\",\r\n            disabled: null,\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Mothers Name\",\r\n            disabled: null,\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Fathers Name\",\r\n            disabled: null,\r\n        },\r\n    ];\r\n    const marriageMenuState = [\r\n        {\r\n            id: 1,\r\n            name: \"Birth date\",\r\n            disabled: null,\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Wife Name\",\r\n            disabled: null,\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Fathers Name\",\r\n            disabled: null,\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Mothers Name\",\r\n            disabled: null,\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Event date\",\r\n            disabled: null,\r\n        },\r\n    ];\r\n    const [records, setRecords] = useState([]);\r\n    const [positionXY, setPositionXY] = useState({\r\n        x: 0,\r\n        y: 0,\r\n    });\r\n\r\n    const [menuOptions, setMenuOptions] = useState(baprismMenuState);\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const location = useLocation();\r\n    const [images, setImages] = useState(location.state);\r\n    const [lineNo, setLineNo] = useState(1);\r\n    const [localData, setLocalData] = useState({});\r\n    const [scale, setScale] = useState(1);\r\n\r\n    //=====================================================\r\n    //sideeffects and others start\r\n    //=======================================================\r\n\r\n    useEffect(() => {\r\n        document.title = \"Image Tagging | Data Keying  \";\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        checking();\r\n    });\r\n\r\n    //=====================================================\r\n    //sideeffects and others end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //images Bbd check  start\r\n    //=======================================================\r\n    const handleClickOpen = (name) => {\r\n        //for modal opening\r\n        setImgType(name);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        //for modal closing\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleBBD = (name) => {\r\n        //for  select image as bbd\r\n\r\n        images.map((image) => {\r\n            if (image.id === name.id) {\r\n                return (image.bbd = 1);\r\n            } else {\r\n                return image;\r\n            }\r\n        });\r\n\r\n        setBbdCheck([\r\n            ...bbdCheck,\r\n            {\r\n                imageType: imgType,\r\n                imageName: name.name,\r\n                imageLocation: name.location,\r\n                imageId: name.id,\r\n            },\r\n        ]);\r\n        setOpen(false);\r\n        goToNextSlide();\r\n    };\r\n\r\n    //=====================================================\r\n    //images Bbd check  end\r\n    //=======================================================\r\n\r\n    const removeElements = (elms) => {\r\n        //for removing child element\r\n        elms.forEach((el) => el.remove());\r\n    };\r\n\r\n    //=====================================================\r\n    //prev and next images start\r\n    //=======================================================\r\n\r\n    let hasNext = currentIndex < images.length - 1;\r\n\r\n    const goToNextSlide = () => {\r\n        setLineNo(1);\r\n\r\n        if (hasNext) {\r\n            setCurrentIndex(currentIndex + 1);\r\n        }\r\n        removeElements(document.querySelectorAll(\"canvas\"));\r\n        setMenuOptions(baprismMenuState);\r\n    };\r\n\r\n    //=====================================================\r\n    //prev and next images end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //radio button click menu change start\r\n    //=======================================================\r\n\r\n    const handleRadioButtons = (event) => {\r\n        const selectedType = event.target.value;\r\n\r\n        if (selectedType === \"Baptism\") {\r\n            setParams({\r\n                type: \"Baptism\",\r\n                fields: baptismField,\r\n            });\r\n            setMenuOptions(baprismMenuState);\r\n        } else if (selectedType === \"Burial\") {\r\n            setParams({\r\n                type: \"Burial\",\r\n                fields: burialField,\r\n            });\r\n            setMenuOptions(burialMenuState);\r\n        } else if (selectedType === \"Marriage\") {\r\n            setParams({\r\n                type: \"Marriage\",\r\n                fields: marriageField,\r\n            });\r\n\r\n            setMenuOptions(marriageMenuState);\r\n        } else if (selectedType === \"Mixed\") {\r\n            setParams({\r\n                type: \"Mixed\",\r\n                fields: mixedField,\r\n            });\r\n        }\r\n    };\r\n\r\n    //=====================================================\r\n    //radio button click menu change end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //enable and disabling button start\r\n    //=======================================================\r\n\r\n    const checking = () => {\r\n        var cavCount = document.querySelectorAll(\"canvas\");\r\n        cavCount.length > 0 ? setDisabled(true) : setDisabled(false);\r\n    };\r\n\r\n    //=====================================================\r\n    //enable and disabling button end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //image zooming start\r\n    //=======================================================\r\n\r\n    var setTransform = () => {\r\n        const zoomImg = canvRef.current;\r\n        zoomImg.style.transform = \"scale(\" + scale + \")\";\r\n    };\r\n\r\n    const zooming = (e) => {\r\n        if (!e.altKey && !e.shiftKey) {\r\n            var delta = e.wheelDelta ? e.wheelDelta : -e.deltaY;\r\n            delta > 0\r\n                ? setScale((prevScale) => (prevScale *= 1.02).toFixed(2))\r\n                : setScale((prevScale) => (prevScale /= 1.02).toFixed(2));\r\n\r\n            setTransform();\r\n        }\r\n    };\r\n\r\n    //=====================================================\r\n    //image zooming end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //onclick menu showing and event handling start\r\n    //=======================================================\r\n\r\n    const handleMenu = (e) => {\r\n        e.preventDefault();\r\n\r\n        const showingMenu = rightMenu.current;\r\n        const mainSec = mainSectionRef.current;\r\n        const appendRef = canvRef.current;\r\n        const bounds = appendRef.getBoundingClientRect();\r\n        console.log(\"scale\", scale);\r\n        const newPosx =\r\n            scale > 0\r\n                ? (e.clientX - bounds.left) / scale\r\n                : (e.clientX - bounds.left) * scale;\r\n        const newPosy =\r\n            scale > 0\r\n                ? (e.clientY - bounds.top) / scale\r\n                : (e.clientY - bounds.top) * scale;\r\n\r\n        let newPos = { x: newPosx, y: newPosy };\r\n\r\n        //for menu click coordinate\r\n        const rectMenu = mainSec.getBoundingClientRect();\r\n\r\n        const x = e.clientX - rectMenu.left;\r\n        const y = e.clientY - rectMenu.top;\r\n\r\n        // Set the position for menu\r\n        showingMenu.style.top = `${y}px`;\r\n        showingMenu.style.left = `${x}px`;\r\n\r\n        // Show the showingMenu\r\n        showingMenu.classList.remove(\"container__menu_hidden\");\r\n        //handleMenuShowing(e)\r\n\r\n        //showHideMenu.addEventListener('click',handleMenuShowing)\r\n        setPositionXY(newPos);\r\n    };\r\n\r\n    //=====================================================\r\n    //onclick menu showing and event handling end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //tagging on image start\r\n    //=======================================================\r\n\r\n    const handleClick = (e) => {\r\n        const appendRefN = canvRef.current;\r\n\r\n        var canv = document.createElement(\"canvas\");\r\n        canv.style.position = \"absolute\";\r\n        canv.style.left = positionXY.x + \"px\";\r\n        canv.style.top = positionXY.y + \"px\";\r\n\r\n        appendRefN.appendChild(canv);\r\n        createTag();\r\n    };\r\n    const createTag = (e) => {\r\n        const appendTag = canvRef.current;\r\n\r\n        var tagLine = document.createElement(\"div\");\r\n\r\n        tagLine.style.display = \"none\";\r\n        tagLine.style.width = \"60px\";\r\n        tagLine.style.background = \"blue\";\r\n        tagLine.style.height = \"3px\";\r\n        tagLine.style.position = \"absolute\";\r\n        tagLine.style.left = positionXY.x + \"px\";\r\n        tagLine.style.top = positionXY.y + \"px\";\r\n        tagLine.className = \"hidden-tag\";\r\n\r\n        appendTag.appendChild(tagLine);\r\n    };\r\n\r\n    //=====================================================\r\n    //tagging on image end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //right click hide start\r\n    //=======================================================\r\n\r\n    const handleMenuShowing = (e) => {\r\n        const showingMenu = rightMenu.current;\r\n        const isClicked = !mainSectionRef.current.contains(e.target);\r\n        if (isClicked) {\r\n            showingMenu.classList.add(\"container__menu_hidden\");\r\n        }\r\n    };\r\n\r\n    const getFieldValue = (e, menuId) => {\r\n        const showingMenu = rightMenu.current;\r\n\r\n        //***saving tagged values to state\r\n        let name = menuOptions[menuId - 1].name;\r\n        let positionx = parseInt(positionXY.x);\r\n        let positiony = parseInt(positionXY.y);\r\n        let imageName = images[currentIndex].name;\r\n        let imageId = images[currentIndex].id;\r\n\r\n        setRecords([\r\n            ...records,\r\n            {\r\n                fieldName: name,\r\n                coordinateX: positionx,\r\n                coordinateY: positiony,\r\n                imageName: imageName,\r\n                imageId: imageId,\r\n                line: lineNo,\r\n            },\r\n        ]);\r\n\r\n        //***disabling menu\r\n        setMenuOptions((prevState) => {\r\n            const newMenuOptions = [...prevState];\r\n            newMenuOptions[menuId - 1].disabled = true;\r\n            newMenuOptions[menuId - 1].taggedTime = new Date().toLocaleString();\r\n            return newMenuOptions;\r\n        });\r\n\r\n        handleClick(e);\r\n        showingMenu.classList.add(\"container__menu_hidden\");\r\n    };\r\n\r\n    //=====================================================\r\n    //right button click menu end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //remove last tag start\r\n    //=======================================================\r\n    //console.log(menuOptions);\r\n    const clearTag = (e) => {\r\n        e.preventDefault();\r\n        var selectLastTag = document.querySelectorAll(\"canvas\");\r\n        var blueLastTag = document.querySelectorAll(\".hidden-tag\");\r\n\r\n        if (selectLastTag.length !== 0) {\r\n            // const lastTagedId = menuOptions\r\n            //     .slice()\r\n            //     .reverse()\r\n            //     .find((menu) => menu.disabled === true);\r\n\r\n            const lastTagedTime = menuOptions\r\n                .map((tag) => tag.taggedTime)\r\n                .sort()\r\n                .reverse()[0];\r\n            const lastTagedObj = menuOptions.find(\r\n                (tt) => tt.taggedTime === lastTagedTime\r\n            );\r\n\r\n            console.log(\"lastTagedId2\", lastTagedObj);\r\n            setMenuOptions((prevState) => {\r\n                const prevMenuOptions = [...prevState];\r\n                console.log(prevMenuOptions);\r\n                prevMenuOptions[\r\n                    lastTagedObj !== 0 && lastTagedObj.id - 1\r\n                ].disabled = null;\r\n                prevMenuOptions[\r\n                    lastTagedObj !== 0 && lastTagedObj.id - 1\r\n                ].taggedTime = \"\";\r\n                return prevMenuOptions;\r\n            });\r\n            selectLastTag[selectLastTag.length - 1].remove();\r\n            records.pop();\r\n        }\r\n        if (blueLastTag.length !== 0) {\r\n            blueLastTag[blueLastTag.length - 1].remove();\r\n        }\r\n    };\r\n    //=====================================================\r\n    //remove last tag end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //save data to localstorage and retrieve start\r\n    //=======================================================\r\n\r\n    const handleSubmit = () => {\r\n        setLineNo(lineNo + 1);\r\n        localStorage.setItem(\"taggedData\", JSON.stringify(records));\r\n        setMenuOptions(baprismMenuState);\r\n        removeElements(document.querySelectorAll(\"canvas\"));\r\n\r\n        document.querySelectorAll(\".hidden-tag\").forEach((el) => {\r\n            el.style.display = \"block\";\r\n        });\r\n    };\r\n\r\n    // //get tagged data from local storage\r\n\r\n    useEffect(() => {\r\n        var localStorageValues = JSON.parse(localStorage.getItem(\"taggedData\"));\r\n        if (localStorageValues) {\r\n            setLocalData([...localStorageValues]);\r\n        }\r\n    }, []);\r\n\r\n    //remove data from localstorage every minute\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            localStorage.removeItem(\"taggedData\");\r\n        }, 60 * 1000);\r\n        return () => clearInterval(interval);\r\n    });\r\n\r\n    //=====================================================\r\n    //save data to localstorage  and retrieve end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //image rotation  start\r\n    //=======================================================\r\n\r\n    var current_rotation = 0;\r\n    const handleRotation = () => {\r\n        const imgRot = imgRef.current;\r\n\r\n        current_rotation += 90;\r\n\r\n        // rotate clockwise by 90 degrees\r\n\r\n        imgRot.style.transform = \"rotate(\" + current_rotation + \"deg)\";\r\n    };\r\n\r\n    //=====================================================\r\n    //image rotation  end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //keyboard key press for tagging   start\r\n    //=======================================================\r\n\r\n    const handleKeyPress = (e) => {\r\n        var xkey = e.which;\r\n        menuOptions.map((menu) => {\r\n            if (menu.disabled !== true && xkey === menu.keyCode) {\r\n                return getFieldValue(e, menu.id);\r\n            }\r\n            return true;\r\n        });\r\n    };\r\n\r\n    //=====================================================\r\n    //keyboard key press for tagging   end\r\n    //=======================================================\r\n\r\n    return (\r\n        <>\r\n            <FullScreen></FullScreen>\r\n            <Sidebar></Sidebar>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    {\r\n                        \"Current image has been marked as BAD or BLANK or DUPLICATE image\"\r\n                    }\r\n                </DialogTitle>\r\n                <DialogContent></DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        color=\"error\"\r\n                        variant=\"outlined\"\r\n                        onClick={handleClose}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"success\"\r\n                        variant=\"outlined\"\r\n                        onClick={() => handleBBD(images[currentIndex])}\r\n                        autoFocus\r\n                    >\r\n                        Ok\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Box\r\n                sx={{\r\n                    width: \"100%\",\r\n                    maxWidth: 250,\r\n                    bgcolor: \"background.paper\",\r\n                }}\r\n                ref={rightMenu}\r\n                className=\"container__menu container__menu_hidden\"\r\n            >\r\n                <List>\r\n                    {menuOptions?.map((option) => {\r\n                        return (\r\n                            <ListItem key={option.id} disablePadding>\r\n                                <ListItemButton\r\n                                    component=\"a\"\r\n                                    onClick={(e) => getFieldValue(e, option.id)}\r\n                                    disabled={option.disabled}\r\n                                    ref={keyevent}\r\n                                >\r\n                                    <ListItemText primary={option.name} />\r\n                                    <span>{option?.keyName}</span>\r\n                                </ListItemButton>\r\n                            </ListItem>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </Box>\r\n\r\n            <Box\r\n                sx={{ flexGrow: 1, height: \"70vh\", overflow: \"scroll\" }}\r\n                ref={mainSectionRef}\r\n            >\r\n                <Grid container spacing={2}>\r\n                    <Grid item lg={12}>\r\n                        <Box>\r\n                            <div\r\n                                ref={canvRef}\r\n                                className=\"zoom\"\r\n                                onWheel={(e) => zooming(e)}\r\n                            >\r\n                                <img\r\n                                    style={{ position: \"relative\" }}\r\n                                    className=\"imageContainer\"\r\n                                    tabIndex=\"-1\"\r\n                                    onKeyDown={(e) => handleKeyPress(e)}\r\n                                    ref={imgRef}\r\n                                    src={images[currentIndex].location}\r\n                                    onContextMenu={(e) => clearTag(e)}\r\n                                    onClick={(e) => handleMenu(e)}\r\n                                    alt=\"img\"\r\n                                />\r\n                            </div>\r\n\r\n                            {/* must use tabIndex  otherwise keyboard event wont work */}\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n            <Divider />\r\n\r\n            <Box\r\n                sx={{ flexGrow: 1, height: \"20vh\", px: 3 }}\r\n                onClick={(e) => handleMenuShowing(e)}\r\n            >\r\n                <Grid container item lg={12} spacing={2} py={1}>\r\n                    <Grid item lg={8}>\r\n                        <Stack direction=\"row\" spacing={2}>\r\n                            {params.fields?.map((singleParam, index) => {\r\n                                return (\r\n                                    <Typography\r\n                                        key={index}\r\n                                        sx={{\r\n                                            color: \"error.main\",\r\n                                            fontSize: \"15px\",\r\n                                            minWidth: 100,\r\n                                        }}\r\n                                    >\r\n                                        {singleParam}\r\n                                    </Typography>\r\n                                );\r\n                            })}\r\n                        </Stack>\r\n                    </Grid>\r\n\r\n                    <Grid item lg={4}>\r\n                        <Stack direction=\"row\" spacing={2}>\r\n                            <Button\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                onClick={handleSubmit}\r\n                                color=\"success\"\r\n                                variant=\"outlined\"\r\n                            >\r\n                                Add Record\r\n                            </Button>\r\n\r\n                            <Button\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                            >\r\n                                Get Last Record No and add\r\n                            </Button>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n                <Divider />\r\n                <Grid container item lg={12} spacing={1} py={2}>\r\n                    <Grid item lg={4}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">Language</FormLabel>\r\n                            <RadioGroup\r\n                                row\r\n                                aria-label=\"language\"\r\n                                name=\"row-radio-buttons-group\"\r\n                            >\r\n                                <FormControlLabel\r\n                                    value=\"German\"\r\n                                    control={<Radio />}\r\n                                    label=\"German\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Latin\"\r\n                                    control={<Radio />}\r\n                                    label=\"Latin\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"English\"\r\n                                    control={<Radio />}\r\n                                    label=\"English\"\r\n                                />\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                        <Stack direction=\"row\" spacing={1}>\r\n                            <Button\r\n                                disabled={!hasNext}\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                color=\"primary\"\r\n                                onClick={goToNextSlide}\r\n                                variant=\"outlined\"\r\n                            >\r\n                                Next Image\r\n                            </Button>\r\n\r\n                            {/* <Button onClick={goToPrevSlide} color=\"secondary\" variant=\"outlined\" >\r\n                                        Prev Image\r\n                                        </Button> */}\r\n                            <Button\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                color=\"success\"\r\n                                disabled={!disabled}\r\n                                variant=\"outlined\"\r\n                            >\r\n                                Save\r\n                            </Button>\r\n\r\n                            <Typography variant=\"h6\" color=\"error\">\r\n                                {\" \"}\r\n                                showing : ({currentIndex + 1} of {images.length}\r\n                                )\r\n                            </Typography>\r\n                        </Stack>\r\n                    </Grid>\r\n\r\n                    <Grid item lg={4}>\r\n                        <Stack direction=\"row\">\r\n                            <FormGroup>\r\n                                <FormControlLabel\r\n                                    control={<Checkbox defaultChecked />}\r\n                                    label=\"First record connection\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={<Checkbox />}\r\n                                    label=\"CopyZone\"\r\n                                />\r\n                            </FormGroup>\r\n                            <Box>\r\n                                <Button\r\n                                    sx={{ mx: 1, my: 1, fontSize: \"12px\" }}\r\n                                    color=\"primary\"\r\n                                    variant=\"outlined\"\r\n                                >\r\n                                    continue\r\n                                </Button>\r\n                                <Button\r\n                                    sx={{ mx: 1, my: 1, fontSize: \"12px\" }}\r\n                                    color=\"primary\"\r\n                                    variant=\"outlined\"\r\n                                >\r\n                                    No Ext DataImage\r\n                                </Button>\r\n                                <Button\r\n                                    sx={{ mx: 1, my: 1, fontSize: \"12px\" }}\r\n                                    color=\"secondary\"\r\n                                    variant=\"outlined\"\r\n                                >\r\n                                    Other Language\r\n                                </Button>\r\n                            </Box>\r\n                        </Stack>\r\n                    </Grid>\r\n                    <Grid item lg={4}>\r\n                        <Stack direction=\"row\" spacing={1}>\r\n                            <Button\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                color=\"info\"\r\n                                disabled={disabled}\r\n                                variant=\"outlined\"\r\n                                onClick={() => handleClickOpen(\"Blank\")}\r\n                            >\r\n                                Blank\r\n                            </Button>\r\n                            <Button\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                color=\"error\"\r\n                                disabled={disabled}\r\n                                variant=\"outlined\"\r\n                                onClick={() => handleClickOpen(\"Bad\")}\r\n                            >\r\n                                Bad\r\n                            </Button>\r\n                            <Button\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                color=\"warning\"\r\n                                disabled={disabled}\r\n                                variant=\"outlined\"\r\n                                onClick={() => handleClickOpen(\"Duplicate\")}\r\n                            >\r\n                                Duplicate\r\n                            </Button>\r\n                            <Button\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                startIcon={<RotateLeftIcon />}\r\n                                color=\"primary\"\r\n                                onClick={handleRotation}\r\n                                variant=\"outlined\"\r\n                            >\r\n                                Rotate\r\n                            </Button>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n                <Divider />\r\n                <Grid container item lg={12} spacing={2} py={2}>\r\n                    <Grid item lg={6}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">Data Type</FormLabel>\r\n                            <RadioGroup\r\n                                row\r\n                                aria-label=\"types\"\r\n                                name=\"row-radio-buttons-group\"\r\n                                defaultValue=\"Baptism\"\r\n                                value={params.type}\r\n                                onChange={handleRadioButtons}\r\n                            >\r\n                                <FormControlLabel\r\n                                    value=\"Baptism\"\r\n                                    control={<Radio />}\r\n                                    label=\"Baptism\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Burial\"\r\n                                    control={<Radio />}\r\n                                    label=\"Burial\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Marriage\"\r\n                                    control={<Radio />}\r\n                                    label=\"Marriage\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Mixed\"\r\n                                    control={<Radio />}\r\n                                    label=\"Mixed\"\r\n                                />\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item lg={6}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">\r\n                                Multiple Type{\" \"}\r\n                            </FormLabel>\r\n                            <RadioGroup\r\n                                row\r\n                                aria-label=\"gender\"\r\n                                name=\"row-radio-buttons-group\"\r\n                            >\r\n                                <FormControlLabel\r\n                                    value=\"Baptism\"\r\n                                    control={<Radio />}\r\n                                    label=\"Baptism\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Burial\"\r\n                                    control={<Radio />}\r\n                                    label=\"Burial\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Marriage\"\r\n                                    control={<Radio />}\r\n                                    label=\"Marriage\"\r\n                                />\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\n","D:\\data keying\\src\\components\\Table\\SimpleTable.js",[],"D:\\data keying\\src\\components\\Navbar\\Navbar.js",[],"D:\\data keying\\src\\components\\Table\\DataTable.js",[],"D:\\data keying\\src\\components\\BaseLayout\\index.js",[],"D:\\data keying\\src\\Redux\\Reducers\\index.js",[],"D:\\data keying\\src\\components\\Header\\Header.js",[],"D:\\data keying\\src\\components\\Footer\\Footer.js",[],"D:\\data keying\\src\\components\\Menu\\Menu.js",[],"D:\\data keying\\src\\hooks\\useCanvas.js",["193"],"import React, { useState, useEffect, useRef } from 'react';\r\n\r\nexport const canvasWidth = 1280;\r\nexport const canvasHeight = 720;\r\n\r\nexport function draw(ctx, location){\r\n  console.log(\"attempting to draw\",location.x,location.y);\r\n  \r\n  ctx.beginPath();\r\n  ctx.strokeStyle = '#ff0000';\r\n  ctx.moveTo(location.x,location.y );\r\n  ctx.lineTo(location.x,location.y);\r\n  ctx.lineWidth = 5;\r\n  ctx.stroke();\r\n\r\n  ctx.beginPath();\r\n  ctx.moveTo(location.x - 50/2,location.y);\r\n  ctx.lineTo(location.x + 50/2,location.y);\r\n  //ctx.lineWidth = 15;\r\n  ctx.stroke();\r\n};\r\n\r\nexport function useCanvas(){\r\n    const canvasRef = useRef(null);\r\n    const [coordinates, setCoordinates] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const canvasObj = canvasRef.current;\r\n        const ctx = canvasObj.getContext('2d');\r\n        // clear the canvas area before rendering the coordinates held in state\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n\r\n        // draw all coordinates held in state\r\n        coordinates.forEach((coordinate)=>{draw(ctx, coordinate)});\r\n    });\r\n\r\n    return [ coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ];\r\n}\r\n\r\n",["194","195"],"D:\\data keying\\src\\components\\Signup\\SignUp.js",[],["196","197"],"D:\\data keying\\src\\components\\Signin\\SignIn.js",[],"D:\\data keying\\src\\components\\DataEntry\\DataEntry.js",["198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219"],"import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport style from \"./DataEntry.css\";\r\nimport img1 from \"../../images/62157_b1013877-00200.jpg\";\r\nimport img2 from \"../../images/62157_b1013877-00202.jpg\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Data from \"./mock-data.json\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport FullScreen from \"./../FullScreen/FullScreen\";\r\nimport AlertBox from \"./../AlertBox/AlertBox\";\r\nimport Sidebar from \"../Sidebar/Sidebar\";\r\n\r\nexport default function DataEntry() {\r\n    const imgRef = useRef(null);\r\n    const canvRef = useRef(null);\r\n\r\n    const mainSectionRef = useRef(null);\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [currentImgIndex, setCurrentImgIndex] = useState(0);\r\n    const [tagIndex, setTagIndex] = useState(0);\r\n    const [data, setData] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [currentField, setCurrentField] = useState(\"\");\r\n    const [openInp, setOpenInp] = useState(false);\r\n    const [inputFields, setInputFields] = useState([\r\n        {\r\n            labelName: \"certiNo\",\r\n            fieldName: \"certiNo\",\r\n            active: true,\r\n            fieldIndex: 1,\r\n            inpType: \"text\",\r\n            inpVal: \"\",\r\n            searchField: true,\r\n        },\r\n        {\r\n            labelName: \"Baptism Date\",\r\n            fieldName: \"baptismDate\",\r\n            active: true,\r\n            fieldIndex: 2,\r\n            inpType: \"text\",\r\n            inpVal: \"\",\r\n            searchField: false,\r\n        },\r\n        {\r\n            labelName: \"Givenname\",\r\n            fieldName: \"givenName\",\r\n            active: true,\r\n            fieldIndex: 3,\r\n            inpType: \"text\",\r\n            inpVal: \"\",\r\n            searchField: true,\r\n        },\r\n\r\n        {\r\n            labelName: \"Surname\",\r\n            fieldName: \"surName\",\r\n            active: true,\r\n            fieldIndex: 4,\r\n            inpType: \"text\",\r\n            inpVal: \"\",\r\n            searchField: true,\r\n        },\r\n        {\r\n            labelName: \"Gender\",\r\n            fieldName: \"gender\",\r\n            active: true,\r\n            fieldIndex: 5,\r\n            inpType: \"text\",\r\n            inpVal: \"\",\r\n            searchField: false,\r\n        },\r\n        {\r\n            labelName: \"Birth Date\",\r\n            fieldName: \"birthDate\",\r\n            active: true,\r\n            fieldIndex: 6,\r\n            inpType: \"text\",\r\n            inpVal: \"\",\r\n            searchField: false,\r\n        },\r\n        {\r\n            labelName: \"Father GName\",\r\n            fieldName: \"fgName\",\r\n            active: true,\r\n            fieldIndex: 7,\r\n            inpType: \"text\",\r\n            inpVal: \"\",\r\n            searchField: true,\r\n        },\r\n        {\r\n            labelName: \"Father SName\",\r\n            fieldName: \"fsName\",\r\n            active: true,\r\n            fieldIndex: 8,\r\n            inpType: \"text\",\r\n            inpVal: \"\",\r\n            searchField: true,\r\n        },\r\n    ]);\r\n    const [customFields, setCustomFields] = useState(inputFields);\r\n\r\n    const [images, setImages] = useState([\r\n        {\r\n            id: 1,\r\n            name: \"First img\",\r\n            location: img1,\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"second img\",\r\n            location: img2,\r\n        },\r\n        // {\r\n        //     id:3,\r\n        //     name:'third img',\r\n        //     location:img3,\r\n\r\n        // },\r\n        // {\r\n        //     id:4,\r\n        //     name:'fourth img',\r\n        //     location:img4,\r\n\r\n        // },\r\n        // {\r\n        //     id:4,\r\n        //     name:'fifth img',\r\n        //     location:img5,\r\n\r\n        // },\r\n    ]);\r\n    const [query, setQuery] = useState(\"\");\r\n    const [entryData, setEntryData] = useState([]);\r\n    const [taggedData, setTaggedData] = useState([]);\r\n    const [taggedDatas, setTaggedDatas] = useState([\r\n        {\r\n            lineNumber: 1,\r\n            tagged: [\r\n                {\r\n                    fieldName: \"First Name\",\r\n                    coordinateX: 354,\r\n                    coordinateY: 234,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n\r\n                {\r\n                    fieldName: \"Last Name\",\r\n                    coordinateX: 524,\r\n                    coordinateY: 232,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"Fathers Name\",\r\n                    coordinateX: 743,\r\n                    coordinateY: 239,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"Mothers Name\",\r\n                    coordinateX: 382,\r\n                    coordinateY: 281,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"First Name\",\r\n                    coordinateX: 372,\r\n                    coordinateY: 549,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n                {\r\n                    fieldName: \"Last Name\",\r\n                    coordinateX: 646,\r\n                    coordinateY: 563,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n                {\r\n                    fieldName: \"Fathers Name\",\r\n                    coordinateX: 386,\r\n                    coordinateY: 667,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n                {\r\n                    fieldName: \"Mothers Name\",\r\n                    coordinateX: 712,\r\n                    coordinateY: 674,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            lineNumber: 2,\r\n            tagged: [\r\n                {\r\n                    fieldName: \"First Name\",\r\n                    coordinateX: 352,\r\n                    coordinateY: 599,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"Last Name\",\r\n                    coordinateX: 670,\r\n                    coordinateY: 607,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"Fathers Name\",\r\n                    coordinateX: 418,\r\n                    coordinateY: 686,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"Mothers Name\",\r\n                    coordinateX: 794,\r\n                    coordinateY: 695,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"Last Name\",\r\n                    coordinateX: 360,\r\n                    coordinateY: 851,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n                {\r\n                    fieldName: \"First Name\",\r\n                    coordinateX: 694,\r\n                    coordinateY: 845,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n                {\r\n                    fieldName: \"Fathers Name\",\r\n                    coordinateX: 369,\r\n                    coordinateY: 969,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n                {\r\n                    fieldName: \"Mothers Name\",\r\n                    coordinateX: 669,\r\n                    coordinateY: 962,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            lineNumber: 3,\r\n            tagged: [\r\n                {\r\n                    fieldName: \"First Name\",\r\n                    coordinateX: 1187,\r\n                    coordinateY: 255,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"Last Name\",\r\n                    coordinateX: 1488,\r\n                    coordinateY: 249,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"Fathers Name\",\r\n                    coordinateX: 1240,\r\n                    coordinateY: 290,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"Mothers Name\",\r\n                    coordinateX: 1557,\r\n                    coordinateY: 335,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"First Name\",\r\n                    coordinateX: 1185,\r\n                    coordinateY: 557,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n                {\r\n                    fieldName: \"Last Name\",\r\n                    coordinateX: 1524,\r\n                    coordinateY: 557,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n                {\r\n                    fieldName: \"Fathers Name\",\r\n                    coordinateX: 1147,\r\n                    coordinateY: 668,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n                {\r\n                    fieldName: \"Mothers Name\",\r\n                    coordinateX: 1575,\r\n                    coordinateY: 674,\r\n                    imageName: \"First img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            lineNumber: 4,\r\n            tagged: [\r\n                {\r\n                    fieldName: \"First Name\",\r\n                    coordinateX: 344,\r\n                    coordinateY: 211,\r\n                    imageName: \"second img\",\r\n                    imageId: 2,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"Last Name\",\r\n                    coordinateX: 588,\r\n                    coordinateY: 214,\r\n                    imageName: \"second img\",\r\n                    imageId: 2,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"Fathers Name\",\r\n                    coordinateX: 377,\r\n                    coordinateY: 312,\r\n                    imageName: \"second img\",\r\n                    imageId: 2,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"Mothers Name\",\r\n                    coordinateX: 706,\r\n                    coordinateY: 314,\r\n                    imageName: \"second img\",\r\n                    imageId: 2,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"First Name\",\r\n                    coordinateX: 351,\r\n                    coordinateY: 523,\r\n                    imageName: \"second img\",\r\n                    imageId: 2,\r\n                    line: 2,\r\n                },\r\n                {\r\n                    fieldName: \"Last Name\",\r\n                    coordinateX: 653,\r\n                    coordinateY: 519,\r\n                    imageName: \"second img\",\r\n                    imageId: 2,\r\n                    line: 2,\r\n                },\r\n                {\r\n                    fieldName: \"Fathers Name\",\r\n                    coordinateX: 345,\r\n                    coordinateY: 577,\r\n                    imageName: \"second img\",\r\n                    imageId: 2,\r\n                    line: 2,\r\n                },\r\n                {\r\n                    fieldName: \"Mothers Name\",\r\n                    coordinateX: 697,\r\n                    coordinateY: 594,\r\n                    imageName: \"second img\",\r\n                    imageId: 2,\r\n                    line: 2,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            lineNumber: 5,\r\n            tagged: [\r\n                {\r\n                    fieldName: \"First Name\",\r\n                    coordinateX: 1208,\r\n                    coordinateY: 231,\r\n                    imageName: \"second img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"Last Name\",\r\n                    coordinateX: 1494,\r\n                    coordinateY: 242,\r\n                    imageName: \"second img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"Fathers Name\",\r\n                    coordinateX: 1181,\r\n                    coordinateY: 294,\r\n                    imageName: \"second img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"Mothers Name\",\r\n                    coordinateX: 1573,\r\n                    coordinateY: 298,\r\n                    imageName: \"second img\",\r\n                    imageId: 1,\r\n                    line: 1,\r\n                },\r\n                {\r\n                    fieldName: \"First Name\",\r\n                    coordinateX: 1192,\r\n                    coordinateY: 556,\r\n                    imageName: \"second img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n                {\r\n                    fieldName: \"Last Name\",\r\n                    coordinateX: 1409,\r\n                    coordinateY: 557,\r\n                    imageName: \"second img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n                {\r\n                    fieldName: \"Fathers Name\",\r\n                    coordinateX: 1167,\r\n                    coordinateY: 611,\r\n                    imageName: \"second img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n                {\r\n                    fieldName: \"Mothers Name\",\r\n                    coordinateX: 1578,\r\n                    coordinateY: 607,\r\n                    imageName: \"second img\",\r\n                    imageId: 1,\r\n                    line: 2,\r\n                },\r\n            ],\r\n        },\r\n    ]);\r\n    const history = useHistory();\r\n\r\n    //=====================================================\r\n    //sideeffects and others start\r\n    //=======================================================\r\n\r\n    useEffect(() => {\r\n        const currentImg = images[currentImgIndex].name;\r\n\r\n        let filteredData = taggedDatas.filter((newItem) => {\r\n            return newItem.tagged[0].imageName === currentImg;\r\n        });\r\n\r\n        setTaggedData(filteredData);\r\n    }, [currentImgIndex]);\r\n\r\n    useEffect(() => {\r\n        document.title = \"Data Entry | Data Keying  \";\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        function handleKeyUp(event) {\r\n            event.preventDefault();\r\n            if (event.ctrlKey && event.keyCode === 113) {\r\n                setOpenInp(true);\r\n            }\r\n        }\r\n\r\n        window.addEventListener(\"keyup\", handleKeyUp);\r\n\r\n        return () => window.removeEventListener(\"keyup\", handleKeyUp);\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (\r\n            images[currentImgIndex + 1] !== undefined &&\r\n            taggedData.length > 0 &&\r\n            taggedData.length === currentIndex\r\n        ) {\r\n            setCurrentImgIndex(currentImgIndex + 1);\r\n            setCurrentIndex(0);\r\n        }\r\n    }, [currentImgIndex, currentIndex, taggedData.length]);\r\n    const handleCloseFields = () => {\r\n        setOpenInp(false);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(true);\r\n        history.push(\"/\");\r\n    };\r\n\r\n    //=====================================================\r\n    //sideeffects and others end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //zoom and scroll into view start\r\n    //=======================================================\r\n\r\n    const handleClick = (x, y) => {\r\n        const appendRef = canvRef.current;\r\n        var canv = document.createElement(\"canvas\");\r\n        canv.style.position = \"absolute\";\r\n        canv.style.left = x + \"px\";\r\n        canv.style.top = y + \"px\";\r\n        canv.style.background = \"red\";\r\n\r\n        appendRef.appendChild(canv);\r\n        var element = document.querySelector(\"canvas\");\r\n        appendRef.style.transform = \"scale(\" + 1.1 + \")\";\r\n        element.scrollIntoView({\r\n            behavior: \"smooth\",\r\n            block: \"center\",\r\n            inline: \"center\",\r\n        });\r\n\r\n        var selectLastTag = document.querySelectorAll(\"canvas\");\r\n\r\n        if (selectLastTag.length > 1) {\r\n            appendRef.removeChild(selectLastTag[0]);\r\n        }\r\n        setTagIndex(tagIndex + 1);\r\n    };\r\n\r\n    //=====================================================\r\n    //zoom and scroll into view end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //changing input field position start\r\n    //=======================================================\r\n\r\n    const checkBoxChange = (e) => {\r\n        const { value, checked } = e.target;\r\n\r\n        const newArr = inputFields.map((field) => {\r\n            if (field.fieldIndex === value) {\r\n                if (checked === false) {\r\n                    const removedField = customFields.filter(\r\n                        (data) => data.fieldIndex !== field.fieldIndex\r\n                    );\r\n\r\n                    setCustomFields(removedField);\r\n                } else if (checked === true) {\r\n                    const addedField = inputFields.find(\r\n                        (singleField) =>\r\n                            singleField.fieldIndex === field.fieldIndex\r\n                    );\r\n                    customFields.push(addedField);\r\n                }\r\n\r\n                return { ...field, active: !field.active };\r\n            } else {\r\n                return field;\r\n            }\r\n        });\r\n\r\n        setInputFields(newArr);\r\n    };\r\n    //=====================================================\r\n    //changing input field position end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //validadtion formating  end  date start\r\n    //=======================================================\r\n\r\n    const validateFunc = (field, value) => {\r\n        const validEmailRegex = RegExp(\r\n            /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i\r\n        );\r\n\r\n        const regexddmmyyyy =\r\n            /^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\\d\\d$/;\r\n\r\n        // if (field == \"certiNo\") {\r\n        //     if (!validEmailRegex.test(value)) {\r\n        //         alert(\"Please enter  valid email address\");\r\n        //     }\r\n        // } else if (field == \"baptismDate\") {\r\n        //     if (!regexddmmyyyy.test(value)) {\r\n        //         alert(\"Please enter  valid date format\");\r\n        //     }\r\n        // }\r\n    };\r\n    //=====================================================\r\n    //validadtion formating  end  date\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //click enter to goto next field start\r\n    //=======================================================\r\n\r\n    function handleEnter(event, x, y) {\r\n        const imgTag = canvRef.current;\r\n\r\n        if (event.keyCode === 13) {\r\n            event.preventDefault();\r\n            validateFunc(event.target.name, event.target.value);\r\n            var tagg = document.querySelectorAll(\"canvas\");\r\n            if (tagg.length >= 1) {\r\n                imgTag.removeChild(tagg[0]);\r\n            }\r\n\r\n            var canvNev = document.createElement(\"canvas\");\r\n            canvNev.style.position = \"absolute\";\r\n            canvNev.style.left = x + \"px\";\r\n            canvNev.style.top = y + \"px\";\r\n            canvNev.style.background = \"red\";\r\n            imgTag.appendChild(canvNev);\r\n\r\n            const form = event.target.form;\r\n            const index = Array.prototype.indexOf.call(form, event.target);\r\n\r\n            index + 1 > inputFields.length - 1\r\n                ? handleSubmit()\r\n                : form.elements[index + 1].focus();\r\n\r\n            var taggNew = document.querySelector(\"canvas\");\r\n            taggNew.scrollIntoView({\r\n                behavior: \"smooth\",\r\n                block: \"center\",\r\n                inline: \"center\",\r\n            });\r\n        }\r\n    }\r\n    //=====================================================\r\n    //click enter to goto next field end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //get tagging vlues start\r\n    //=======================================================\r\n\r\n    const handleChanges = (e) => {\r\n        const { name, value } = e.target;\r\n\r\n        customFields.map((ek) => {\r\n            if (ek.fieldName == name) {\r\n                ek.inpVal = value;\r\n            }\r\n        });\r\n\r\n        setEntryData({\r\n            ...entryData,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    //=====================================================\r\n    //get tagging vlues end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //submitting vlues start\r\n    //=======================================================\r\n\r\n    const handleSubmit = (e) => {\r\n        setQuery(\"\");\r\n        if (entryData) {\r\n            setData([\r\n                ...data,\r\n                {\r\n                    certiNo: entryData.certiNo ? entryData.certiNo : null,\r\n                    baptismDate: entryData.baptismDate\r\n                        ? entryData.baptismDate\r\n                        : null,\r\n                    givenName: entryData.givenName ? entryData.givenName : null,\r\n                    surName: entryData.surName ? entryData.surName : null,\r\n                    gender: entryData.gender ? entryData.gender : null,\r\n                    birthDate: entryData.birthDate ? entryData.birthDate : null,\r\n                    fgName: entryData.fgName ? entryData.fgName : null,\r\n                    fsName: entryData.fsName ? entryData.fsName : null,\r\n                },\r\n            ]);\r\n            setEntryData([]);\r\n            var selectLastTag = document.querySelectorAll(\".inputCls\");\r\n            selectLastTag.forEach((el) => (el.value = \"\"));\r\n\r\n            if (taggedData.length > currentIndex) {\r\n                setCurrentIndex((currentIndex) => currentIndex + 1);\r\n            }\r\n        }\r\n        if (\r\n            images[currentImgIndex + 1] === undefined &&\r\n            taggedData.length - 1 === currentIndex\r\n        ) {\r\n            setOpen(true);\r\n        }\r\n\r\n        console.log(\"form submitted\", entryData);\r\n    };\r\n\r\n    //=====================================================\r\n    //submitting vlues end\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //for changing image if current image tagging is start\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //for changing image if current image tagging is finished\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //dragging div start\r\n    //=======================================================\r\n\r\n    //=====================================================\r\n    //dragging div finished\r\n    //=======================================================\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Sidebar></Sidebar>\r\n                <FullScreen></FullScreen>\r\n                <AlertBox\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    header=\"No data to entry\"\r\n                    title=\"  Your entry is finished.To entry new data please tag\r\n                    again\"\r\n                ></AlertBox>\r\n                <AlertBox\r\n                    open={openInp}\r\n                    onClose={handleCloseFields}\r\n                    header=\"Add remove fields\"\r\n                    inputFields={inputFields}\r\n                    onChange={checkBoxChange}\r\n                ></AlertBox>\r\n\r\n                <Box\r\n                    sx={{ flexGrow: 1, height: \"70vh\", overflow: \"scroll\" }}\r\n                    ref={mainSectionRef}\r\n                >\r\n                    <Grid container spacing={2}>\r\n                        <Grid item lg={12}>\r\n                            <Box>\r\n                                <div\r\n                                    ref={canvRef}\r\n                                    style={{ position: \"relative\" }}\r\n                                >\r\n                                    <img\r\n                                        className=\"imageContainer\"\r\n                                        tabIndex=\"-1\"\r\n                                        ref={imgRef}\r\n                                        src={images[currentImgIndex].location}\r\n                                        alt=\"img\"\r\n                                    />\r\n                                </div>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Divider />\r\n            </div>\r\n\r\n            <div>\r\n                <Box sx={{ flexGrow: 1, height: \"20vh\", m: 2 }}>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Grid container spacing={2} className=\"form-fields\">\r\n                            {customFields.map((field, i) => (\r\n                                <Grid item lg={1} key={i}>\r\n                                    <h6\r\n                                        className=\"text-danger\"\r\n                                        style={{ height: \"30px\" }}\r\n                                    >\r\n                                        {field.inpVal ? field.inpVal : \"\"}\r\n                                    </h6>\r\n                                    <div className=\"d-block\">\r\n                                        <label>{field.labelName}</label>\r\n                                        <input\r\n                                            key={i}\r\n                                            className=\"inputCls adaptive_input\"\r\n                                            autoComplete=\"off\"\r\n                                            type={field.inpType}\r\n                                            onKeyDown={(e) =>\r\n                                                handleEnter(\r\n                                                    e,\r\n                                                    taggedData[currentIndex]\r\n                                                        ?.tagged[\r\n                                                        field.fieldIndex\r\n                                                    ]?.coordinateX,\r\n                                                    taggedData[currentIndex]\r\n                                                        ?.tagged[\r\n                                                        field.fieldIndex\r\n                                                    ]?.coordinateY\r\n                                                )\r\n                                            }\r\n                                            onChange={(e) => {\r\n                                                handleChanges(e);\r\n                                                setQuery(e.target.value);\r\n                                                setCurrentField(e.target.name);\r\n                                            }}\r\n                                            name={field.fieldName}\r\n                                            onClick={() =>\r\n                                                handleClick(\r\n                                                    taggedData[currentIndex]\r\n                                                        ?.tagged[\r\n                                                        field.fieldIndex - 1\r\n                                                    ]?.coordinateX,\r\n                                                    taggedData[currentIndex]\r\n                                                        ?.tagged[\r\n                                                        field.fieldIndex - 1\r\n                                                    ]?.coordinateY\r\n                                                )\r\n                                            }\r\n                                            //value={field.inpVal}\r\n                                            //ref={inputRef}\r\n                                        ></input>\r\n                                        {currentField === field.fieldName &&\r\n                                            query !== \"\" &&\r\n                                            field.searchField && (\r\n                                                <SearchBar\r\n                                                    currentField={currentField}\r\n                                                    query={query}\r\n                                                ></SearchBar>\r\n                                            )}\r\n                                    </div>\r\n                                </Grid>\r\n                            ))}\r\n                        </Grid>\r\n                    </form>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\data keying\\src\\components\\ImageTagging\\Aitagging.js",["220","221","222","223","224","225","226"],"import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport RotateLeftIcon from \"@mui/icons-material/RotateLeft\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\n//import style from './Tagging.css'\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemButton from \"@mui/material/ListItemButton\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport img1 from \"../../images/62157_b1013877-00200.jpg\";\r\nimport img2 from \"../../images/62157_b1013877-00202.jpg\";\r\nimport img3 from \"../../images/62157_b1013877-00203.jpg\";\r\nimport img4 from \"../../images/62157_b1013877-00204.jpg\";\r\nimport img5 from \"../../images/62157_b1013877-00205.jpg\";\r\nconst baptismField = [\r\n    \"Baptism Date\",\r\n    \"Name\",\r\n    \"Gender\",\r\n    \"Chi:Gender\",\r\n    \"Birth Date\",\r\n    \"Fathers_name\",\r\n    \"Mothers_name\",\r\n];\r\n\r\nexport default function Aitagging() {\r\n    const imgRef = useRef(null);\r\n    const canvRef = useRef(null);\r\n    const rightMenu = useRef(null);\r\n    const mainSectionRef = useRef(null);\r\n\r\n    const [disabled, setDisabled] = useState(false);\r\n\r\n    const [params, setParams] = useState({\r\n        type: \"Baptism\",\r\n        fields: baptismField,\r\n    });\r\n\r\n    const baprismMenuState = [\r\n        {\r\n            id: 1,\r\n            name: \"First Name\",\r\n            disabled: null,\r\n            keyCode: 65,\r\n            keyName: \"A\",\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Last Name\",\r\n            disabled: null,\r\n            keyCode: 83,\r\n            keyName: \"S\",\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Fathers Name\",\r\n            disabled: null,\r\n            keyCode: 68,\r\n            keyName: \"D\",\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Mothers Name\",\r\n            disabled: null,\r\n            keyCode: 70,\r\n            keyName: \"F\",\r\n        },\r\n    ];\r\n    const [open, setOpen] = useState(false);\r\n    const [imgType, setImgType] = useState(\"\");\r\n\r\n    const [menuOptions, setMenuOptions] = useState(baprismMenuState);\r\n    const handleClickOpen = (name) => {\r\n        setImgType(name);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [images, setImages] = useState([\r\n        {\r\n            id: 1,\r\n            name: \"First img\",\r\n            location: img1,\r\n            bbd: 0,\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"second img\",\r\n            location: img2,\r\n            bbd: 0,\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"third img\",\r\n            location: img3,\r\n            bbd: 0,\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"fourth img\",\r\n            location: img4,\r\n            bbd: 0,\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"fifth img\",\r\n            location: img5,\r\n            bbd: 0,\r\n        },\r\n    ]);\r\n    function setMousePosition(e) {\r\n        var ev = e || window.event; //Moz || IE\r\n        if (ev.pageX) {\r\n            //Moz\r\n            mouse.x = ev.pageX + window.pageXOffset;\r\n            mouse.y = ev.pageY + window.pageYOffset;\r\n        }\r\n    }\r\n\r\n    var mouse = {\r\n        x: 0,\r\n        y: 0,\r\n        startX: 0,\r\n        startY: 0,\r\n    };\r\n    var element = null;\r\n\r\n    const onmousemove = (e) => {\r\n        setMousePosition(e);\r\n        if (element !== null) {\r\n            element.style.width = Math.abs(mouse.x - mouse.startX) + \"px\";\r\n            element.style.height = Math.abs(mouse.y - mouse.startY) + \"px\";\r\n            element.style.left =\r\n                mouse.x - mouse.startX < 0\r\n                    ? mouse.x + \"px\"\r\n                    : mouse.startX + \"px\";\r\n            element.style.top =\r\n                mouse.y - mouse.startY < 0\r\n                    ? mouse.y + \"px\"\r\n                    : mouse.startY + \"px\";\r\n        }\r\n    };\r\n\r\n    const handleClick = (e) => {\r\n        const canvas = canvRef.current;\r\n\r\n        if (element !== null) {\r\n            element = null;\r\n            canvas.style.cursor = \"default\";\r\n            console.log(\"finsihed.\", mouse.x, mouse.y);\r\n            handleMenu(e);\r\n        } else {\r\n            mouse.startX = mouse.x;\r\n            mouse.startY = mouse.y;\r\n            element = document.createElement(\"div\");\r\n            element.className = \"rectangle\";\r\n            element.style.left = mouse.x + \"px\";\r\n            element.style.top = mouse.y + \"px\";\r\n            canvas.appendChild(element);\r\n            canvas.style.cursor = \"crosshair\";\r\n            console.log(\"begun.\", mouse.startX, mouse.startY);\r\n        }\r\n    };\r\n\r\n    //********remove last tag start********\r\n\r\n    const clearTag = (e) => {\r\n        e.preventDefault();\r\n        var selectLastTag = document.querySelectorAll(\".rectangle\");\r\n\r\n        if (selectLastTag.length !== 0) {\r\n            //    const lastTagedId = menuOptions.slice().reverse().find( ( menu ) => menu.disabled === true );\r\n            //    setMenuOptions(prevState => {\r\n            //        const prevMenuOptions = [...prevState];\r\n            //        prevMenuOptions[lastTagedId !== 0 && lastTagedId.id -1].disabled = null;\r\n            //        return prevMenuOptions;\r\n            //    })\r\n\r\n            selectLastTag[selectLastTag.length - 1].remove();\r\n        }\r\n    };\r\n    //********remove last tag end********\r\n    const handleMenu = (e) => {\r\n        e.preventDefault();\r\n\r\n        const showingMenu = rightMenu.current;\r\n        const mainSec = mainSectionRef.current;\r\n\r\n        //for menu click coordinate\r\n        const rectMenu = mainSec.getBoundingClientRect();\r\n\r\n        const x = e.clientX - rectMenu.left;\r\n        const y = e.clientY - rectMenu.top;\r\n\r\n        // Set the position for menu\r\n        showingMenu.style.top = `${y}px`;\r\n        showingMenu.style.left = `${x}px`;\r\n\r\n        // Show the showingMenu\r\n        showingMenu.classList.remove(\"container__menu_hidden\");\r\n        //handleMenuShowing(e)\r\n    };\r\n\r\n    const getFieldValue = (e, menuId) => {\r\n        const showingMenu = rightMenu.current;\r\n\r\n        //saving tagged values to state\r\n        // let name =menuOptions[menuId -1].name\r\n        // let positionx =positionXY.x\r\n        // let positiony =positionXY.y\r\n        // let imageName =images[currentIndex].name\r\n        // let imageId =images[currentIndex].id\r\n\r\n        // setRecords([\r\n        //         ...records,\r\n        //         {\r\n        //             fieldName: name,\r\n        //             coordinateX:positionx,\r\n        //             coordinateY:positiony,\r\n        //             imageName:imageName,\r\n        //             imageId:imageId,\r\n        //             line:lineNo\r\n        //         }\r\n        // ])\r\n\r\n        //disabling menu\r\n        setMenuOptions((prevState) => {\r\n            const newMenuOptions = [...prevState];\r\n            newMenuOptions[menuId - 1].disabled = true;\r\n            return newMenuOptions;\r\n        });\r\n\r\n        handleClick(e);\r\n        showingMenu.classList.add(\"container__menu_hidden\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    {\r\n                        \"Current image has been marked as BAD or BLANK or DUPLICATE image\"\r\n                    }\r\n                </DialogTitle>\r\n                <DialogContent></DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        color=\"error\"\r\n                        variant=\"outlined\"\r\n                        onClick={handleClose}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button color=\"success\" variant=\"outlined\" autoFocus>\r\n                        Ok\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Box\r\n                sx={{\r\n                    width: \"100%\",\r\n                    maxWidth: 250,\r\n                    bgcolor: \"background.paper\",\r\n                }}\r\n                ref={rightMenu}\r\n                className=\"container__menu container__menu_hidden\"\r\n            >\r\n                <List>\r\n                    {menuOptions?.map((option) => {\r\n                        return (\r\n                            <ListItem key={option.id} disablePadding>\r\n                                <ListItemButton\r\n                                    component=\"a\"\r\n                                    onClick={(e) => getFieldValue(e, option.id)}\r\n                                    disabled={option.disabled}\r\n                                >\r\n                                    <ListItemText primary={option.name} />\r\n                                    <span>{option?.keyName}</span>\r\n                                </ListItemButton>\r\n                            </ListItem>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </Box>\r\n\r\n            <Box\r\n                sx={{ flexGrow: 1, height: \"70vh\", overflow: \"scroll\" }}\r\n                ref={mainSectionRef}\r\n            >\r\n                <Grid container spacing={2}>\r\n                    <Grid item lg={12}>\r\n                        <Box>\r\n                            <div\r\n                                ref={canvRef}\r\n                                className=\"zoom\"\r\n                                onClick={(e) => handleClick(e)}\r\n                                onMouseMove={(e) => onmousemove(e)}\r\n                                onContextMenu={(e) => clearTag(e)}\r\n                                style={{ position: \"relative\" }}\r\n                            >\r\n                                <img\r\n                                    className=\"imageContainer\"\r\n                                    ref={imgRef}\r\n                                    src={images[currentIndex].location}\r\n                                    alt=\"img\"\r\n                                />\r\n                            </div>\r\n\r\n                            {/* must use tabIndex  otherwise keyboard event wont work */}\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n            <Divider />\r\n\r\n            <Box sx={{ flexGrow: 1, height: \"20vh\", px: 3 }}>\r\n                <Grid container item lg={12} spacing={2} py={1}>\r\n                    <Grid item lg={8}></Grid>\r\n\r\n                    <Grid item lg={4}>\r\n                        <Stack direction=\"row\" spacing={2}>\r\n                            <Button\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                color=\"success\"\r\n                                variant=\"outlined\"\r\n                            >\r\n                                Add Record\r\n                            </Button>\r\n\r\n                            <Button\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                            >\r\n                                Get Last Record No and add\r\n                            </Button>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n                <Divider />\r\n                <Grid container item lg={12} spacing={1} py={2}>\r\n                    <Grid item lg={3}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">Language</FormLabel>\r\n                            <RadioGroup\r\n                                row\r\n                                aria-label=\"language\"\r\n                                name=\"row-radio-buttons-group\"\r\n                            >\r\n                                <FormControlLabel\r\n                                    value=\"German\"\r\n                                    control={<Radio />}\r\n                                    label=\"German\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Latin\"\r\n                                    control={<Radio />}\r\n                                    label=\"Latin\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"English\"\r\n                                    control={<Radio />}\r\n                                    label=\"English\"\r\n                                />\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                        <Stack direction=\"row\" spacing={1}>\r\n                            <Button\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                color=\"primary\"\r\n                                variant=\"outlined\"\r\n                            >\r\n                                Next Image\r\n                            </Button>\r\n\r\n                            {/* <Button onClick={goToPrevSlide} color=\"secondary\" variant=\"outlined\" >\r\n                                        Prev Image\r\n                                        </Button> */}\r\n                            <Button\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                color=\"success\"\r\n                                disabled={!disabled}\r\n                                variant=\"outlined\"\r\n                            >\r\n                                Save\r\n                            </Button>\r\n                        </Stack>\r\n                    </Grid>\r\n\r\n                    <Grid item lg={5}>\r\n                        <Stack direction=\"row\">\r\n                            <FormGroup>\r\n                                <FormControlLabel\r\n                                    control={<Checkbox defaultChecked />}\r\n                                    label=\"First record connection\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={<Checkbox />}\r\n                                    label=\"CopyZone\"\r\n                                />\r\n                            </FormGroup>\r\n                            <Box>\r\n                                <Button\r\n                                    sx={{ mx: 1, my: 1, fontSize: \"12px\" }}\r\n                                    color=\"primary\"\r\n                                    variant=\"outlined\"\r\n                                >\r\n                                    continue\r\n                                </Button>\r\n                                <Button\r\n                                    sx={{ mx: 1, my: 1, fontSize: \"12px\" }}\r\n                                    color=\"primary\"\r\n                                    variant=\"outlined\"\r\n                                >\r\n                                    No Ext DataImage\r\n                                </Button>\r\n                                <Button\r\n                                    sx={{ mx: 1, my: 1, fontSize: \"12px\" }}\r\n                                    color=\"secondary\"\r\n                                    variant=\"outlined\"\r\n                                >\r\n                                    Other Language\r\n                                </Button>\r\n                            </Box>\r\n                        </Stack>\r\n                    </Grid>\r\n                    <Grid item lg={4}>\r\n                        <Stack direction=\"row\" spacing={1}>\r\n                            <Button\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                color=\"info\"\r\n                                disabled={disabled}\r\n                                variant=\"outlined\"\r\n                                onClick={() => handleClickOpen(\"Blank\")}\r\n                            >\r\n                                Blank\r\n                            </Button>\r\n                            <Button\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                color=\"error\"\r\n                                disabled={disabled}\r\n                                variant=\"outlined\"\r\n                                onClick={() => handleClickOpen(\"Bad\")}\r\n                            >\r\n                                Bad\r\n                            </Button>\r\n                            <Button\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                color=\"warning\"\r\n                                disabled={disabled}\r\n                                variant=\"outlined\"\r\n                                onClick={() => handleClickOpen(\"Duplicate\")}\r\n                            >\r\n                                Duplicate\r\n                            </Button>\r\n                            <Button\r\n                                sx={{ fontSize: \"12px\" }}\r\n                                startIcon={<RotateLeftIcon />}\r\n                                color=\"primary\"\r\n                                variant=\"outlined\"\r\n                            >\r\n                                Rotate\r\n                            </Button>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n                <Divider />\r\n                <Grid container item lg={12} spacing={2} py={2}>\r\n                    <Grid item lg={6}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">Data Type</FormLabel>\r\n                            <RadioGroup\r\n                                row\r\n                                aria-label=\"types\"\r\n                                name=\"row-radio-buttons-group\"\r\n                                defaultValue=\"Baptism\"\r\n                                value={params.type}\r\n                            >\r\n                                <FormControlLabel\r\n                                    value=\"Baptism\"\r\n                                    control={<Radio />}\r\n                                    label=\"Baptism\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Burial\"\r\n                                    control={<Radio />}\r\n                                    label=\"Burial\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Marriage\"\r\n                                    control={<Radio />}\r\n                                    label=\"Marriage\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Mixed\"\r\n                                    control={<Radio />}\r\n                                    label=\"Mixed\"\r\n                                />\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item lg={6}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">\r\n                                Multiple Type{\" \"}\r\n                            </FormLabel>\r\n                            <RadioGroup\r\n                                row\r\n                                aria-label=\"gender\"\r\n                                name=\"row-radio-buttons-group\"\r\n                            >\r\n                                <FormControlLabel\r\n                                    value=\"Baptism\"\r\n                                    control={<Radio />}\r\n                                    label=\"Baptism\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Burial\"\r\n                                    control={<Radio />}\r\n                                    label=\"Burial\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Marriage\"\r\n                                    control={<Radio />}\r\n                                    label=\"Marriage\"\r\n                                />\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\n","D:\\data keying\\src\\components\\DataEntry\\SearchBar.js",["227"],"import React from \"react\";\r\nimport Data from \"./mock-data.json\";\r\n\r\nexport default function SearchBar({ query, currentField }) {\r\n    return (\r\n        <div className=\"search-bar \">\r\n            <div>\r\n                <div\r\n                    className=\" d-flex justify-content-between  bg-dark\"\r\n                    style={{ lineHeight: \"1\" }}\r\n                >\r\n                    <h6>No</h6>\r\n                    <h6 className=\"d-block \">{currentField}</h6>\r\n                </div>\r\n\r\n                {Data.filter((post) => {\r\n                    if (query === \"\") {\r\n                        return post;\r\n                    } else if (\r\n                        post.first_name\r\n                            .toLowerCase()\r\n                            .includes(query.toLowerCase())\r\n                    ) {\r\n                        return post;\r\n                    }\r\n                })\r\n                    .slice(0, 5)\r\n                    .map((post, index) => (\r\n                        <div\r\n                            className=\"box  row\"\r\n                            key={index}\r\n                            style={{ borderBottom: \"1px solid black\" }}\r\n                        >\r\n                            <span className=\" col-4\">{index + 1}</span>\r\n                            <span className=\" col-4\">{post.first_name}</span>\r\n                        </div>\r\n                    ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","D:\\data keying\\src\\components\\FullScreen\\FullScreen.js",[],"D:\\data keying\\src\\components\\AlertBox\\AlertBox.js",[],"D:\\data keying\\src\\pages\\SignUp\\SignUp.js",[],"D:\\data keying\\src\\pages\\SignIn\\SignIn.js",["228","229"],"import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from \"@mui/material/Button\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport LinkMaterial from \"@mui/material/Link\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport logo from \"./logo2.png\";\r\nimport { createToken } from \"../../Redux/Actions/authAction\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport AlertTitle from \"@mui/material/AlertTitle\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nfunction Copyright(props) {\r\n  return (\r\n    <Typography\r\n      variant=\"body2\"\r\n      color=\"text.secondary\"\r\n      align=\"center\"\r\n      {...props}\r\n    >\r\n      {\"Copyright © \"}\r\n      <LinkMaterial color=\"inherit\" href=\"https://ghitbd.com/\">\r\n        GHIT\r\n      </LinkMaterial>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst theme = createTheme();\r\nlet emptySignIn = {\r\n  userId: \"\",\r\n  password: \"\",\r\n  remember: false,\r\n};\r\n\r\nfunction LogingError(props) {\r\n  const isLoggedIn = props.isLoggedIn;\r\n  if (isLoggedIn) {\r\n    return (\r\n      <Stack sx={{ width: \"100%\", paddingTop: \"10px\" }} spacing={4}>\r\n        <Alert severity=\"error\">\r\n          <AlertTitle>Error</AlertTitle>\r\n          Credential fails — <strong>check your User Id or password</strong>\r\n        </Alert>\r\n      </Stack>\r\n    );\r\n  }\r\n  return <div></div>;\r\n}\r\n\r\nexport default function SignIn() {\r\n  const [errors, setErrors] = useState({});\r\n  const [loginFail, setLoginFail] = useState(false);\r\n  const [signIn, setSignIn] = useState(emptySignIn);\r\n  const [validateOnChange, setvalidateOnChange] = useState(true);\r\n  let history = useHistory();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoggedIn } = useSelector((state) => state.authReducer);\r\n\r\n  if (isLoggedIn) {\r\n    history.push(\"/\");\r\n  }\r\n\r\n  //FRONTEND VALIDATION\r\n  const validate = (fieldValues = signIn) => {\r\n    let temp = { ...errors };\r\n    if (\"userId\" in fieldValues) {\r\n      temp.userId = fieldValues.userId ? \"\" : \"User Id field is required.\";\r\n    }\r\n\r\n    // if (\"email\" in fieldValues)\r\n    //   temp.email = /$^|.+@.+..+/.test(fieldValues.email)\r\n    //     ? \"\"\r\n    //     : \"Email is not valid.\";\r\n\r\n    if (\"password\" in fieldValues)\r\n      temp.password = fieldValues.password ? \"\" : \"Password field is required.\";\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    if (fieldValues === signIn)\r\n      return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (validate()) {\r\n      // var token = localStorage.getItem(\"user\");\r\n      // const myObj = JSON.parse(token);\r\n\r\n      dispatch(createToken(signIn.userId, signIn.password))\r\n        .then(() => {\r\n          history.push(\"/\");\r\n        })\r\n        .catch(() => {\r\n          setLoginFail(true);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setSignIn({\r\n      ...signIn,\r\n      [name]: value,\r\n    });\r\n    if (validateOnChange) {\r\n      validate({ [name]: value });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div>\r\n            <img\r\n              src={logo}\r\n              style={{ width: \"200px\", height: \"200px\" }}\r\n              alt=\"GHIT Image\"\r\n            />\r\n          </div>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign in\r\n          </Typography>\r\n\r\n          <LogingError isLoggedIn={loginFail} />\r\n\r\n          <Box\r\n            component=\"form\"\r\n            onSubmit={handleSubmit}\r\n            noValidate\r\n            sx={{ mt: 1 }}\r\n          >\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              label=\"User Id\"\r\n              name=\"userId\"\r\n              autoComplete=\"userId\"\r\n              autoFocus\r\n              onChange={handleChange}\r\n              value={signIn.userId}\r\n              error={errors.userId}\r\n              helperText={errors.userId}\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              onChange={handleChange}\r\n              value={signIn.password}\r\n              autoComplete=\"current-password\"\r\n              error={errors.password}\r\n              helperText={errors.password}\r\n            />\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  value=\"true\"\r\n                  name=\"remember\"\r\n                  onChange={handleChange}\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Remember me\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n            >\r\n              Sign In\r\n            </Button>\r\n            <Grid container>\r\n              {/* <Grid item>\r\n                <LinkMaterial href=\"/signup \" variant=\"body2\">\r\n                  {\"Don't have an account? Sign Up\"}\r\n                </LinkMaterial>\r\n              </Grid> */}\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        <Copyright sx={{ mt: 8, mb: 4 }} />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\data keying\\src\\Redux\\Actions\\authAction.js",["230","231","232","233"],"import {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  SET_MESSAGE,\r\n} from \"./types\";\r\n\r\nimport AuthService from \"../Services/authService\";\r\n\r\nexport const createToken = (username, password) => async (dispatch) => {\r\n  try {\r\n    const res = await AuthService.getToken({\r\n      username,\r\n      password,\r\n    });\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n\r\n    return Promise.resolve(res.data);\r\n  } catch (err) {\r\n    return Promise.reject(err);\r\n  }\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  AuthService.logout();\r\n\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};\r\n","D:\\data keying\\src\\Redux\\Actions\\types.js",[],"D:\\data keying\\src\\Redux\\Services\\authService.js",[],"D:\\data keying\\src\\utilities\\http-common.js",[],"D:\\data keying\\src\\Redux\\Reducers\\countryReducer.js",["234"],"//////////////////COUNTRY ACTION TYPES/////////////////////////\r\nimport {\r\n  CREATE_COUNTRY,\r\n  GET_COUNTRY_ALL,\r\n  GET_COUNTRY,\r\n  UPDATE_COUNTRY,\r\n  DELETE_COUNTRY,\r\n} from \"../Actions/types\";\r\n//////////////////END OF COUNTRY ACTION TYPES/////////////////////////\r\n\r\nconst initialState = [];\r\n\r\nfunction countryReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case CREATE_COUNTRY:\r\n      return [...state, payload];\r\n\r\n    case GET_COUNTRY:\r\n      return [payload];\r\n\r\n    case GET_COUNTRY_ALL:\r\n      return payload;\r\n\r\n    case UPDATE_COUNTRY:\r\n      return state.map((country) => {\r\n        if (country.id === country.id) {\r\n          return {\r\n            ...state,\r\n            ...payload,\r\n          };\r\n        } else {\r\n          return country;\r\n        }\r\n      });\r\n\r\n    case DELETE_COUNTRY:\r\n      return state.filter(({ id }) => id !== payload.id);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default countryReducer;\r\n","D:\\data keying\\src\\Redux\\Reducers\\authReducer.js",["235","236","237","238"],"//////////////////AUTH ACTION TYPES/////////////////////////\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  SET_MESSAGE,\r\n} from \"../Actions/types\";\r\n//////////////////END OF AUTH ACTION TYPES/////////////////////////\r\n\r\n// Reset when storage is more than 24hours\r\nvar hours = 1;\r\nvar now = Date.now();\r\nvar setupTime = localStorage.getItem(\"setupTime\");\r\nif (setupTime == null) {\r\n  localStorage.setItem(\"setupTime\", now);\r\n} else if (now - setupTime > hours * 60 * 60 * 1000) {\r\n  localStorage.clear();\r\n  localStorage.setItem(\"setupTime\", now);\r\n}\r\n\r\nconst user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\nconst initialState = user\r\n  ? { isLoggedIn: true, userInfo: \"hey\" }\r\n  : { isLoggedIn: false, userInfo: \"\" };\r\n\r\nfunction authReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case LOGIN_SUCCESS:\r\n      return { ...state, userInfo: \"hey\", isLoggedIn: true, payload };\r\n\r\n    case LOGOUT:\r\n      return {\r\n        ...state,\r\n        userInfo: \" \",\r\n        isLoggedIn: false,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default authReducer;\r\n","D:\\data keying\\src\\Redux\\Reducers\\projectReducer.js",[],"D:\\data keying\\src\\Redux\\Reducers\\languageReducer.js",["239"],"//////////////////LANGUAGE ACTION TYPES/////////////////////////\r\nimport {\r\n  CREATE_LANGUAGE,\r\n  GET_LANGUAGE_ALL,\r\n  GET_LANGUAGE,\r\n  UPDATE_LANGUAGE,\r\n  DELETE_LANGUAGE,\r\n} from \"../Actions/types\";\r\n//////////////////END OF LANGUAGE ACTION TYPES/////////////////////////\r\n\r\nconst initialState = [];\r\n\r\nfunction languageReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case CREATE_LANGUAGE:\r\n      return [...state, payload];\r\n\r\n    case GET_LANGUAGE:\r\n      return [payload];\r\n\r\n    case GET_LANGUAGE_ALL:\r\n      return payload;\r\n\r\n    case UPDATE_LANGUAGE:\r\n      return state.map((language) => {\r\n        if (language.id === language.id) {\r\n          return {\r\n            ...state,\r\n            ...payload,\r\n          };\r\n        } else {\r\n          return language;\r\n        }\r\n      });\r\n\r\n    case DELETE_LANGUAGE:\r\n      return state.filter(({ id }) => id !== payload.id);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default languageReducer;\r\n","D:\\data keying\\src\\Redux\\Actions\\languageAction.js",[],["240","241"],"D:\\data keying\\src\\Redux\\Actions\\projectAction.js",[],"D:\\data keying\\src\\Redux\\Actions\\countryAction.js",[],"D:\\data keying\\src\\Redux\\Services\\countryService.js",[],"D:\\data keying\\src\\Redux\\Services\\projectService.js",[],"D:\\data keying\\src\\Redux\\Services\\languageService.js",[],"D:\\data keying\\src\\components\\Sidebar\\Sidebar.js",[],"D:\\data keying\\src\\components\\Sidebar\\data.js",[],"D:\\data keying\\src\\components\\ImageSeries\\ImageSeries.js",["242","243","244","245"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport List from \"@mui/material/List\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\n\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport img1 from \"../../images/62157_b1013877-00200.jpg\";\r\nimport img2 from \"../../images/62157_b1013877-00202.jpg\";\r\nimport img3 from \"../../images/62157_b1013877-00203.jpg\";\r\nimport img4 from \"../../images/62157_b1013877-00204.jpg\";\r\nimport img5 from \"../../images/62157_b1013877-00205.jpg\";\r\n\r\nfunction ConfirmationDialogRaw(props) {\r\n    const { onClose, open, ...other } = props;\r\n    const [checked, setChecked] = useState(null);\r\n    const [selectedSeries, setSelectedSeries] = useState([]);\r\n    const [imagesPool, setImagesPool] = useState([\r\n        {\r\n            seriesNo: 11222000000,\r\n            images: [\r\n                {\r\n                    id: 1,\r\n                    name: \"First img\",\r\n                    location: img1,\r\n                    bbd: 0,\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: \"second img\",\r\n                    location: img2,\r\n                    bbd: 0,\r\n                },\r\n                {\r\n                    id: 3,\r\n                    name: \"third img\",\r\n                    location: img3,\r\n                    bbd: 0,\r\n                },\r\n                {\r\n                    id: 4,\r\n                    name: \"fourth img\",\r\n                    location: img4,\r\n                    bbd: 0,\r\n                },\r\n                {\r\n                    id: 5,\r\n                    name: \"fifth img\",\r\n                    location: img5,\r\n                    bbd: 0,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            seriesNo: 33344400000,\r\n            images: [\r\n                {\r\n                    id: 1,\r\n                    name: \"Last img\",\r\n                    location: img1,\r\n                    bbd: 0,\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: \"second img\",\r\n                    location: img2,\r\n                    bbd: 0,\r\n                },\r\n                {\r\n                    id: 3,\r\n                    name: \"third img\",\r\n                    location: img3,\r\n                    bbd: 0,\r\n                },\r\n                {\r\n                    id: 4,\r\n                    name: \"fourth img\",\r\n                    location: img4,\r\n                    bbd: 0,\r\n                },\r\n                {\r\n                    id: 5,\r\n                    name: \"fifth img\",\r\n                    location: img5,\r\n                    bbd: 0,\r\n                },\r\n            ],\r\n        },\r\n    ]);\r\n\r\n    let history = useHistory();\r\n\r\n    const handleCancel = () => {\r\n        onClose();\r\n    };\r\n\r\n    const handleOk = () => {\r\n        if (checked != null) {\r\n            history.push({\r\n                pathname: \"/tag\",\r\n                state: selectedSeries,\r\n            });\r\n        } else {\r\n            console.log(\"please select radio button\");\r\n        }\r\n    };\r\n\r\n    const handleChange = (images, i) => {\r\n        setChecked(i);\r\n        setSelectedSeries(images);\r\n    };\r\n    console.log(selectedSeries);\r\n\r\n    return (\r\n        <Dialog\r\n            sx={{ \"& .MuiDialog-paper\": { width: \"80%\", maxHeight: 435 } }}\r\n            maxWidth=\"xs\"\r\n            open={open}\r\n            {...other}\r\n        >\r\n            <DialogTitle>Select Image Series</DialogTitle>\r\n            <DialogContent dividers>\r\n                {imagesPool.map((image, i) => {\r\n                    return (\r\n                        <div\r\n                            key={i}\r\n                            className=\"d-block\"\r\n                            style={{\r\n                                borderBottom: \"1px solid #dee2e6\",\r\n                                cursor: \"pointer\",\r\n                            }}\r\n                        >\r\n                            <input\r\n                                id={image.seriesNo}\r\n                                type=\"radio\"\r\n                                value={image.seriesNo}\r\n                                onChange={() => handleChange(image.images, i)}\r\n                                checked={checked == i ? true : false}\r\n                            ></input>\r\n                            <label htmlFor={image.seriesNo} className=\"p-1\">\r\n                                {image.seriesNo}\r\n                            </label>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button autoFocus onClick={handleCancel}>\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={handleOk}>Ok</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default function ImageSeries() {\r\n    const [open, setOpen] = useState(true);\r\n\r\n    const handleClose = (newValue) => {\r\n        setOpen(false);\r\n    };\r\n    const handleClickListItem = () => {\r\n        setOpen(true);\r\n    };\r\n    return (\r\n        <Box\r\n            sx={{\r\n                width: \"400px\",\r\n                maxWidth: 860,\r\n                maxHeight: 800,\r\n                bgcolor: \"#dee2e6\",\r\n                position: \"relative\",\r\n                borderRadius: \"10px\",\r\n                top: \"200px\",\r\n                left: \"555px\",\r\n                padding: \"10px\",\r\n            }}\r\n        >\r\n            <List component=\"div\">\r\n                <ListItem\r\n                    button\r\n                    divider\r\n                    aria-haspopup=\"true\"\r\n                    aria-controls=\"image_series\"\r\n                    aria-label=\"phone ringtone\"\r\n                    onClick={handleClickListItem}\r\n                >\r\n                    <ListItemText primary=\"Click to select Image Series\" />\r\n                </ListItem>\r\n\r\n                <ConfirmationDialogRaw\r\n                    id=\"image_series\"\r\n                    keepMounted\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                />\r\n            </List>\r\n        </Box>\r\n    );\r\n}\r\n",{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","severity":1,"message":"251","line":2,"column":50,"nodeType":"252","messageId":"253","endLine":2,"endColumn":54},{"ruleId":"250","severity":1,"message":"254","line":16,"column":8,"nodeType":"252","messageId":"253","endLine":16,"endColumn":13},{"ruleId":"250","severity":1,"message":"255","line":71,"column":11,"nodeType":"252","messageId":"253","endLine":71,"endColumn":18},{"ruleId":"250","severity":1,"message":"256","line":183,"column":20,"nodeType":"252","messageId":"253","endLine":183,"endColumn":29},{"ruleId":"250","severity":1,"message":"257","line":185,"column":12,"nodeType":"252","messageId":"253","endLine":185,"endColumn":21},{"ruleId":"250","severity":1,"message":"258","line":1,"column":8,"nodeType":"252","messageId":"253","endLine":1,"endColumn":13},{"ruleId":"246","replacedBy":"259"},{"ruleId":"248","replacedBy":"260"},{"ruleId":"246","replacedBy":"261"},{"ruleId":"248","replacedBy":"262"},{"ruleId":"250","severity":1,"message":"254","line":6,"column":8,"nodeType":"252","messageId":"253","endLine":6,"endColumn":13},{"ruleId":"250","severity":1,"message":"263","line":10,"column":8,"nodeType":"252","messageId":"253","endLine":10,"endColumn":12},{"ruleId":"250","severity":1,"message":"256","line":105,"column":20,"nodeType":"252","messageId":"253","endLine":105,"endColumn":29},{"ruleId":"250","severity":1,"message":"264","line":138,"column":25,"nodeType":"252","messageId":"253","endLine":138,"endColumn":39},{"ruleId":"265","severity":1,"message":"266","line":500,"column":8,"nodeType":"267","endLine":500,"endColumn":25,"suggestions":"268"},{"ruleId":"265","severity":1,"message":"269","line":528,"column":8,"nodeType":"267","endLine":528,"endColumn":58,"suggestions":"270"},{"ruleId":"250","severity":1,"message":"271","line":614,"column":15,"nodeType":"252","messageId":"253","endLine":614,"endColumn":30},{"ruleId":"272","severity":1,"message":"273","line":615,"column":23,"nodeType":"274","messageId":"275","endLine":615,"endColumn":24,"suggestions":"276"},{"ruleId":"272","severity":1,"message":"277","line":615,"column":27,"nodeType":"274","messageId":"275","endLine":615,"endColumn":28,"suggestions":"278"},{"ruleId":"272","severity":1,"message":"279","line":615,"column":35,"nodeType":"274","messageId":"275","endLine":615,"endColumn":36,"suggestions":"280"},{"ruleId":"272","severity":1,"message":"273","line":615,"column":48,"nodeType":"274","messageId":"275","endLine":615,"endColumn":49,"suggestions":"281"},{"ruleId":"272","severity":1,"message":"277","line":615,"column":52,"nodeType":"274","messageId":"275","endLine":615,"endColumn":53,"suggestions":"282"},{"ruleId":"272","severity":1,"message":"279","line":615,"column":60,"nodeType":"274","messageId":"275","endLine":615,"endColumn":61,"suggestions":"283"},{"ruleId":"272","severity":1,"message":"279","line":615,"column":69,"nodeType":"274","messageId":"275","endLine":615,"endColumn":70,"suggestions":"284"},{"ruleId":"272","severity":1,"message":"279","line":615,"column":73,"nodeType":"274","messageId":"275","endLine":615,"endColumn":74,"suggestions":"285"},{"ruleId":"272","severity":1,"message":"277","line":615,"column":89,"nodeType":"274","messageId":"275","endLine":615,"endColumn":90,"suggestions":"286"},{"ruleId":"272","severity":1,"message":"279","line":615,"column":97,"nodeType":"274","messageId":"275","endLine":615,"endColumn":98,"suggestions":"287"},{"ruleId":"272","severity":1,"message":"277","line":615,"column":114,"nodeType":"274","messageId":"275","endLine":615,"endColumn":115,"suggestions":"288"},{"ruleId":"272","severity":1,"message":"279","line":615,"column":122,"nodeType":"274","messageId":"275","endLine":615,"endColumn":123,"suggestions":"289"},{"ruleId":"250","severity":1,"message":"290","line":618,"column":15,"nodeType":"252","messageId":"253","endLine":618,"endColumn":28},{"ruleId":"291","severity":1,"message":"292","line":683,"column":31,"nodeType":"293","messageId":"294","endLine":683,"endColumn":33},{"ruleId":"295","severity":1,"message":"296","line":684,"column":30,"nodeType":"297","messageId":"298","endLine":684,"endColumn":32},{"ruleId":"250","severity":1,"message":"299","line":6,"column":8,"nodeType":"252","messageId":"253","endLine":6,"endColumn":18},{"ruleId":"250","severity":1,"message":"300","line":15,"column":20,"nodeType":"252","messageId":"253","endLine":15,"endColumn":29},{"ruleId":"250","severity":1,"message":"301","line":47,"column":22,"nodeType":"252","messageId":"253","endLine":47,"endColumn":33},{"ruleId":"250","severity":1,"message":"302","line":49,"column":20,"nodeType":"252","messageId":"253","endLine":49,"endColumn":29},{"ruleId":"250","severity":1,"message":"303","line":85,"column":12,"nodeType":"252","messageId":"253","endLine":85,"endColumn":19},{"ruleId":"250","severity":1,"message":"304","line":97,"column":26,"nodeType":"252","messageId":"253","endLine":97,"endColumn":41},{"ruleId":"250","severity":1,"message":"256","line":98,"column":20,"nodeType":"252","messageId":"253","endLine":98,"endColumn":29},{"ruleId":"291","severity":1,"message":"305","line":16,"column":37,"nodeType":"293","messageId":"306","endLine":16,"endColumn":39},{"ruleId":"250","severity":1,"message":"307","line":66,"column":28,"nodeType":"252","messageId":"253","endLine":66,"endColumn":47},{"ruleId":"308","severity":1,"message":"309","line":139,"column":13,"nodeType":"310","endLine":143,"endColumn":15},{"ruleId":"250","severity":1,"message":"311","line":2,"column":3,"nodeType":"252","messageId":"253","endLine":2,"endColumn":19},{"ruleId":"250","severity":1,"message":"312","line":3,"column":3,"nodeType":"252","messageId":"253","endLine":3,"endColumn":16},{"ruleId":"250","severity":1,"message":"313","line":5,"column":3,"nodeType":"252","messageId":"253","endLine":5,"endColumn":13},{"ruleId":"250","severity":1,"message":"314","line":7,"column":3,"nodeType":"252","messageId":"253","endLine":7,"endColumn":14},{"ruleId":"315","severity":1,"message":"316","line":28,"column":13,"nodeType":"297","messageId":"317","endLine":28,"endColumn":38},{"ruleId":"250","severity":1,"message":"311","line":3,"column":3,"nodeType":"252","messageId":"253","endLine":3,"endColumn":19},{"ruleId":"250","severity":1,"message":"312","line":4,"column":3,"nodeType":"252","messageId":"253","endLine":4,"endColumn":16},{"ruleId":"250","severity":1,"message":"313","line":6,"column":3,"nodeType":"252","messageId":"253","endLine":6,"endColumn":13},{"ruleId":"250","severity":1,"message":"314","line":8,"column":3,"nodeType":"252","messageId":"253","endLine":8,"endColumn":14},{"ruleId":"315","severity":1,"message":"316","line":28,"column":13,"nodeType":"297","messageId":"317","endLine":28,"endColumn":40},{"ruleId":"246","replacedBy":"318"},{"ruleId":"248","replacedBy":"319"},{"ruleId":"250","severity":1,"message":"300","line":1,"column":17,"nodeType":"252","messageId":"253","endLine":1,"endColumn":26},{"ruleId":"250","severity":1,"message":"320","line":1,"column":38,"nodeType":"252","messageId":"253","endLine":1,"endColumn":44},{"ruleId":"250","severity":1,"message":"321","line":23,"column":24,"nodeType":"252","messageId":"253","endLine":23,"endColumn":37},{"ruleId":"295","severity":1,"message":"296","line":143,"column":50,"nodeType":"297","messageId":"298","endLine":143,"endColumn":52},"no-native-reassign",["322"],"no-negated-in-lhs",["323"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'style' is defined but never used.","'zoomRef' is assigned a value but never used.","'setImages' is assigned a value but never used.","'localData' is assigned a value but never used.","'React' is defined but never used.",["322"],["323"],["322"],["323"],"'Data' is defined but never used.","'setTaggedDatas' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'images' and 'taggedDatas'. Either include them or remove the dependency array.","ArrayExpression",["324"],"React Hook useEffect has a missing dependency: 'images'. Either include it or remove the dependency array.",["325"],"'validEmailRegex' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["326","327"],"Unnecessary escape character: \\..",["328","329"],"Unnecessary escape character: \\\".",["330","331"],["332","333"],["334","335"],["336","337"],["338","339"],["340","341"],["342","343"],["344","345"],["346","347"],["348","349"],"'regexddmmyyyy' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Typography' is defined but never used.","'useEffect' is defined but never used.","'setDisabled' is assigned a value but never used.","'setParams' is assigned a value but never used.","'imgType' is assigned a value but never used.","'setCurrentIndex' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","'setvalidateOnChange' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'REGISTER_SUCCESS' is defined but never used.","'REGISTER_FAIL' is defined but never used.","'LOGIN_FAIL' is defined but never used.","'SET_MESSAGE' is defined but never used.","no-self-compare","Comparing to itself is potentially pointless.","comparingToSelf",["322"],["323"],"'useRef' is defined but never used.","'setImagesPool' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"messageId":"354","fix":"355","desc":"356"},{"messageId":"357","fix":"358","desc":"359"},{"messageId":"354","fix":"360","desc":"356"},{"messageId":"357","fix":"361","desc":"359"},{"messageId":"354","fix":"362","desc":"356"},{"messageId":"357","fix":"363","desc":"359"},{"messageId":"354","fix":"364","desc":"356"},{"messageId":"357","fix":"365","desc":"359"},{"messageId":"354","fix":"366","desc":"356"},{"messageId":"357","fix":"367","desc":"359"},{"messageId":"354","fix":"368","desc":"356"},{"messageId":"357","fix":"369","desc":"359"},{"messageId":"354","fix":"370","desc":"356"},{"messageId":"357","fix":"371","desc":"359"},{"messageId":"354","fix":"372","desc":"356"},{"messageId":"357","fix":"373","desc":"359"},{"messageId":"354","fix":"374","desc":"356"},{"messageId":"357","fix":"375","desc":"359"},{"messageId":"354","fix":"376","desc":"356"},{"messageId":"357","fix":"377","desc":"359"},{"messageId":"354","fix":"378","desc":"356"},{"messageId":"357","fix":"379","desc":"359"},{"messageId":"354","fix":"380","desc":"356"},{"messageId":"357","fix":"381","desc":"359"},"Update the dependencies array to be: [currentImgIndex, images, taggedDatas]",{"range":"382","text":"383"},"Update the dependencies array to be: [currentImgIndex, currentIndex, images, taggedData.length]",{"range":"384","text":"385"},"removeEscape",{"range":"386","text":"387"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"388","text":"389"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"390","text":"387"},{"range":"391","text":"389"},{"range":"392","text":"387"},{"range":"393","text":"389"},{"range":"394","text":"387"},{"range":"395","text":"389"},{"range":"396","text":"387"},{"range":"397","text":"389"},{"range":"398","text":"387"},{"range":"399","text":"389"},{"range":"400","text":"387"},{"range":"401","text":"389"},{"range":"402","text":"387"},{"range":"403","text":"389"},{"range":"404","text":"387"},{"range":"405","text":"389"},{"range":"406","text":"387"},{"range":"407","text":"389"},{"range":"408","text":"387"},{"range":"409","text":"389"},{"range":"410","text":"387"},{"range":"411","text":"389"},[15859,15876],"[currentImgIndex, images, taggedDatas]",[16637,16687],"[currentImgIndex, currentIndex, images, taggedData.length]",[19719,19720],"",[19719,19719],"\\",[19723,19724],[19723,19723],[19731,19732],[19731,19731],[19744,19745],[19744,19744],[19748,19749],[19748,19748],[19756,19757],[19756,19756],[19765,19766],[19765,19765],[19769,19770],[19769,19769],[19785,19786],[19785,19785],[19793,19794],[19793,19793],[19810,19811],[19810,19810],[19818,19819],[19818,19818]]